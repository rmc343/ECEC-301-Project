package wordgame;

import java.io.FileNotFoundException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

public class WordGameGUI extends javax.swing.JFrame {

// Instance variables
    public WordGame theGame;
    public String activeWord;
    public SoundPlayer r = new SoundPlayer("src/sound/theme.wav");  // Plays the indicated sound file 
    public Thread musicThread = new Thread(r);// Dedicated thread to play the sound file. 
    public Map<String, Game> games = new HashMap<>();
    public Game currentGame;
    public boolean isFirstTurn = true;

    /**
     * Creates new form WordGameGUI
     */
    public WordGameGUI() throws FileNotFoundException {
        initComponents();
        theGame = new WordGame();
        games = theGame.loadGames();

        for (Game game : games.values()) {
            System.out.printf("\n\n %s Size: %d \n Questions: " + game.getQuestions() + "\n Answers: " + game.getAnswers(), game.getName(),game.getAnswers().size());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topPanel = new javax.swing.JPanel();
        imageLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        feedbackLabel = new javax.swing.JLabel();
        feedbackTextField = new javax.swing.JTextField();
        scoreLabel = new javax.swing.JLabel();
        scoreTextField = new javax.swing.JTextField();
        crystalCountLabel = new javax.swing.JLabel();
        crystalCountTextField = new javax.swing.JTextField();
        bottomPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        wordLabel = new javax.swing.JLabel();
        hintLabel = new javax.swing.JLabel();
        userInputLabel = new javax.swing.JLabel();
        wordTextField = new javax.swing.JTextField();
        hintTextField = new javax.swing.JTextField();
        userInputTextField = new javax.swing.JTextField();
        hintButton = new javax.swing.JButton();
        musicButton = new javax.swing.JToggleButton();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Antonym Game");

        imageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Antonyms2_SmallerVersion.png"))); // NOI18N

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.setText("Find the Antonym!\nEarn 10 points for each correct answer\nLose 20 points for each wrong answer.\nWin with 100 points or loose with -50.\n\nGood luck! Press OK to start.");
        jTextArea2.setFocusable(false);
        jScrollPane2.setViewportView(jTextArea2);

        feedbackLabel.setText("Feedback");

        feedbackTextField.setFocusable(false);
        feedbackTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                feedbackTextFieldActionPerformed(evt);
            }
        });

        scoreLabel.setText("Score");

        scoreTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        scoreTextField.setText("0");
        scoreTextField.setFocusable(false);
        scoreTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scoreTextFieldActionPerformed(evt);
            }
        });

        crystalCountLabel.setText("Crystals");

        crystalCountTextField.setEditable(false);
        crystalCountTextField.setText("10");
        crystalCountTextField.setName("crystalsTextField"); // NOI18N

        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(topPanelLayout.createSequentialGroup()
                        .addComponent(feedbackLabel)
                        .addGap(64, 64, 64)
                        .addComponent(crystalCountLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(crystalCountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(scoreLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scoreTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(feedbackTextField))
                .addContainerGap())
        );
        topPanelLayout.setVerticalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(imageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(topPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(feedbackLabel)
                            .addComponent(scoreLabel)
                            .addComponent(scoreTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(crystalCountLabel)
                            .addComponent(crystalCountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(feedbackTextField)))
                .addContainerGap())
        );

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        exitButton.setText("EXIT");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        wordLabel.setText("Find the antonym for ");

        hintLabel.setText("Hint: (Starts with)");

        userInputLabel.setText("Enter Antonym");

        wordTextField.setText("Challenge word will appear here.");
        wordTextField.setFocusable(false);
        wordTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wordTextFieldActionPerformed(evt);
            }
        });

        hintTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        hintTextField.setText("**");
        hintTextField.setFocusable(false);

        hintButton.setText("Hint");
        hintButton.setName("hintButton"); // NOI18N
        hintButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hintButtonActionPerformed(evt);
            }
        });

        musicButton.setText("Music");
        musicButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                musicButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout bottomPanelLayout = new javax.swing.GroupLayout(bottomPanel);
        bottomPanel.setLayout(bottomPanelLayout);
        bottomPanelLayout.setHorizontalGroup(
            bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bottomPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(wordLabel)
                    .addComponent(userInputLabel)
                    .addComponent(hintLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(wordTextField)
                    .addGroup(bottomPanelLayout.createSequentialGroup()
                        .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(userInputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hintTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bottomPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(musicButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hintButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exitButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(okButton)
                .addGap(6, 6, 6))
        );
        bottomPanelLayout.setVerticalGroup(
            bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bottomPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wordLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hintLabel)
                    .addComponent(hintTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userInputLabel)
                    .addComponent(userInputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(exitButton)
                    .addComponent(hintButton)
                    .addComponent(musicButton))
                .addContainerGap())
        );

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Antonym", "Synonym", "Homonym", "French", "Spanish", "Capital City", "Permutation Count", "Another", "More" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Choose Question");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(topPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bottomPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(topPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bottomPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void feedbackTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_feedbackTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_feedbackTextFieldActionPerformed

    private void scoreTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scoreTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_scoreTextFieldActionPerformed

    // The OK button
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        // TODO add your handling code here:
        // 1. Generate a random word Pair and extract the first and second words from that pair. 
        
        String question = currentGame.getRand().toString();
        String challenge;  // Always presented as the challenge word. 
        String answer;  // This is the answer for each question. 

        String feedbackMessage = "";  // Response to player after answer is submitted. 

        // 2. Check if this is the first turn. 
        // If it is, choose a random challenge and display it in the field wordTextField. 
        // There is no need to check any answer as the game has just started. 
        String oldWord = wordTextField.getText();

        if (isFirstTurn) {
            
            isFirstTurn = false;
            activeWord = question;
            challenge = activeWord.toUpperCase();
            answer = currentGame.getAnswerKey().get(activeWord).toString().toUpperCase();
            
            wordTextField.setText(challenge); // Give user their first challenge. 
            if (theGame.theme.equals(WordGame.PERMUTATION_COUNT)) {
                hintTextField.setText("NA");
            } else {
                hintTextField.setText(answer.substring(0, 2));
            }
            userInputTextField.setText("");
            System.out.println("Test Word is: " + activeWord);
        } // 3. Check the user's answer. Update the score, and give a Feedback message. 
        else {
            // Get the user's answer. 
            String userAnswer = userInputTextField.getText().toUpperCase();
            challenge = activeWord.toUpperCase();
            answer = currentGame.getAnswerKey().get(activeWord).toString().toUpperCase();
// Answer is correct!
            if (userAnswer.equals(answer)) {
                theGame.score += 10;  // Add ten points. 
                scoreTextField.setText("" + theGame.score);
                feedbackMessage = "CORRECT! " + theGame.theme + " for " + challenge + " is " + answer;
                feedbackTextField.setText(feedbackMessage);
                System.out.println(feedbackMessage);

                // Prepare for a new turn. 
                activeWord = question; // Update the question.
                challenge = activeWord.toUpperCase();
                answer = currentGame.getAnswerKey().get(activeWord).toString().toUpperCase();
                wordTextField.setText(challenge); // Give user their next challenge. 
                // Don't show a hint for the Permutation Counting Game!
                if (theGame.theme.equals(WordGame.PERMUTATION_COUNT)) {
                    hintTextField.setText("NA");
                } else {
                    hintTextField.setText(answer.substring(0, 2));
                }
                userInputTextField.setText("");

            } // Answer is wrong!
            else {
                System.out.println("You are wrong!");
                theGame.score -= 20;  // Subtract points. 
                scoreTextField.setText("" + theGame.score);
                feedbackMessage = "WRONG! " + theGame.theme + "  for " + challenge + " is " + answer;
                feedbackTextField.setText(feedbackMessage);
                System.out.println(feedbackMessage);

                // Prepare for a new turn. 
                activeWord = question; // Update the question.
                challenge = activeWord.toUpperCase();
                answer = currentGame.getAnswerKey().get(activeWord).toString().toUpperCase();
                wordTextField.setText(challenge); // Give user their next challenge. 
                if (theGame.theme.equals(WordGame.PERMUTATION_COUNT)) {
                    hintTextField.setText("NA");
                } else {
                    hintTextField.setText(answer.substring(0, 2));
                }
                userInputTextField.setText("");
            }// end of inner else block

// After processing the answer, right or wrong, test if the game is over.        
            // a. Test if the player has lost.
            if (theGame.score <= -50) {
                feedbackMessage = "Game Over! That was Pathetic!";
                feedbackTextField.setText(feedbackMessage);
                okButton.setEnabled(false);
                wordTextField.setText(""); // Blank it out 
                hintTextField.setText("");
                userInputTextField.setEnabled(false);
            }

            // b. Test if the player has won. 
            if (theGame.score >= 100) {
                feedbackMessage = "Awesome! You are a Genius!";
                feedbackTextField.setText(feedbackMessage);
                okButton.setEnabled(false);
                wordTextField.setText(""); // Blank it out 
                hintTextField.setText("");
                userInputTextField.setEnabled(false);

            }

        } // end of outer else blobk


    }//GEN-LAST:event_okButtonActionPerformed

    private void wordTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wordTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_wordTextFieldActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed


    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        // If a new question style is chosen, such as synonyms or homonyms, we need to update certain GUI fields. 

       // Update the image with one of your choice (hunt on internet) for each question type. 
        // Update all fields that said Antonym to the appropriate term. 
        // Change the game to the new question type.  
        String jComboBoxChoice = jComboBox1.getSelectedItem().toString();
        theGame.theme = jComboBoxChoice;

        // If a new theme has been selected using the JComboBox, erase the previous unanswered question. 
        // * * * * * * * * * *  Still do do this here. 
        wordTextField.setText("Challenge word will appear here."); // Blank out previous unanswered question. 
        hintTextField.setText("");
        feedbackTextField.setText("");

        currentGame = games.get(jComboBoxChoice);

        if (currentGame != null) {

            wordLabel.setText("Find the " + currentGame.getName().toLowerCase() + " for");
            System.out.println("You selected the new theme: " + jComboBoxChoice);
            userInputLabel.setText("Enter " + currentGame.getName().toLowerCase());
            jTextArea2.setText("Find the " + currentGame.getName() + "!\n"
                    + "Earn 10 points for each correct answer\nLose 20 points "
                    + "for each wrong answer.\nWin with 100 points or loose with"
                    + " -50.\n\nGood luck! Press OK to start.");
            setTitle(currentGame.getName() + " Game");
            imageLabel.setIcon(currentGame.getIcon());
            theGame.theme =  currentGame.getName();

        } else {

            System.out.println("This is not a game");

        }

    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void hintButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hintButtonActionPerformed
        // TODO add your handling code here:
        System.out.println("You pressed the Hint button. That will cost you 2 crystals.");
        theGame.crystalCount -= 2;  // Subtract 2 from the crystal count. 
        // Display the new crystal count. 

        crystalCountTextField.setText("" + theGame.crystalCount);
        String answer = currentGame.getAnswerKey().get(activeWord).toString();
        hintTextField.setText(answer.substring(0, 3));  // Show the first three letters instead of just 2. 


    }//GEN-LAST:event_hintButtonActionPerformed

    // This is a toggle button. WWe will use it to play or stop the music. 
    private void musicButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_musicButtonActionPerformed
        // TODO add your handling code here:

        // Recall r is defined at the top as a SoundPlayer object. 
        // and musicThread is defined above as:
        // Thread musicThread = new Thread(r); // Don't do this!!!
        if (musicButton.isSelected()) {
            musicThread = new Thread(r);  // Create a new thread.
            System.out.println("Music button has been pressed.");
            musicButton.setText("STOP");
            musicThread.start();

        } else {
            System.out.println("Music file stopped.");
            musicButton.setText("Music");
            musicThread.interrupt();  // When the interrupt is caught, the current thread is closed. 
        }


    }//GEN-LAST:event_musicButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WordGameGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WordGameGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WordGameGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WordGameGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new WordGameGUI().setVisible(true);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(WordGameGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

    } // end of main

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JLabel crystalCountLabel;
    private javax.swing.JTextField crystalCountTextField;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel feedbackLabel;
    private javax.swing.JTextField feedbackTextField;
    private javax.swing.JButton hintButton;
    private javax.swing.JLabel hintLabel;
    private javax.swing.JTextField hintTextField;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JToggleButton musicButton;
    private javax.swing.JButton okButton;
    private javax.swing.JLabel scoreLabel;
    private javax.swing.JTextField scoreTextField;
    private javax.swing.JPanel topPanel;
    private javax.swing.JLabel userInputLabel;
    private javax.swing.JTextField userInputTextField;
    private javax.swing.JLabel wordLabel;
    private javax.swing.JTextField wordTextField;
    // End of variables declaration//GEN-END:variables
}
